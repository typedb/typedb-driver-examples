"use strict";function _asyncToGenerator(a){return function(){var b=a.apply(this,arguments);return new Promise(function(a,c){function d(e,f){try{var g=b[e](f),h=g.value}catch(a){return void c(a)}return g.done?void a(h):Promise.resolve(h).then(function(a){d("next",a)},function(a){d("throw",a)})}return d("next")})}}const RequestBuilder=require("./util/RequestBuilder"),GrpcCommunicator=require("./util/GrpcCommunicator"),ConceptFactory=require("./concept/ConceptFactory"),ResponseConverter=require("./util/ResponseConverter"),GrpcIteratorFactory=require("./util/GrpcIteratorFactory");function TransactionService(a){this.communicator=new GrpcCommunicator(a);const b=new ConceptFactory(this),c=new GrpcIteratorFactory(b,this.communicator);this.respConverter=new ResponseConverter(b,c)}TransactionService.prototype.close=function(){return this.communicator.end()},TransactionService.prototype.deleteConcept=function(a){const b=RequestBuilder.deleteConcept(a);return this.communicator.send(b)},TransactionService.prototype.getLabel=function(a){const b=RequestBuilder.getLabel(a);return this.communicator.send(b).then(a=>this.respConverter.getLabel(a))},TransactionService.prototype.setLabel=function(a,b){const c=RequestBuilder.setLabel(a,b);return this.communicator.send(c)},TransactionService.prototype.isImplicit=function(a){const b=RequestBuilder.isImplicit(a);return this.communicator.send(b).then(a=>this.respConverter.isImplicit(a))},TransactionService.prototype.subs=function(a){const b=RequestBuilder.subs(a);return this.communicator.send(b).then(a=>this.respConverter.subs(a))},TransactionService.prototype.sups=function(a){const b=RequestBuilder.sups(a);return this.communicator.send(b).then(a=>this.respConverter.sups(a))},TransactionService.prototype.getSup=function(a){const b=RequestBuilder.getSup(a);return this.communicator.send(b).then(a=>this.respConverter.getSup(a))},TransactionService.prototype.setSup=function(a,b){const c=RequestBuilder.setSup(a,b);return this.communicator.send(c)},TransactionService.prototype.getWhen=function(a){const b=RequestBuilder.getWhen(a);return this.communicator.send(b).then(a=>this.respConverter.getWhen(a))},TransactionService.prototype.getThen=function(a){const b=RequestBuilder.getThen(a);return this.communicator.send(b).then(a=>this.respConverter.getThen(a))},TransactionService.prototype.getRelationshipTypesThatRelateRole=function(a){const b=RequestBuilder.getRelationshipTypesThatRelateRole(a);return this.communicator.send(b).then(a=>this.respConverter.getRelationshipTypesThatRelateRole(a))},TransactionService.prototype.getTypesThatPlayRole=function(a){const b=RequestBuilder.getTypesThatPlayRole(a);return this.communicator.send(b).then(a=>this.respConverter.getTypesThatPlayRole(a))},TransactionService.prototype.instances=function(a){const b=RequestBuilder.instances(a);return this.communicator.send(b).then(a=>this.respConverter.instances(a))},TransactionService.prototype.getAttributeTypes=function(a){const b=RequestBuilder.getAttributeTypes(a);return this.communicator.send(b).then(a=>this.respConverter.getAttributeTypes(a))},TransactionService.prototype.setAttributeType=function(a,b){const c=RequestBuilder.setAttributeType(a,b);return this.communicator.send(c)},TransactionService.prototype.unsetAttributeType=function(a,b){const c=RequestBuilder.unsetAttributeType(a,b);return this.communicator.send(c)},TransactionService.prototype.getKeyTypes=function(a){const b=RequestBuilder.getKeyTypes(a);return this.communicator.send(b).then(a=>this.respConverter.getKeyTypes(a))},TransactionService.prototype.setKeyType=function(a,b){const c=RequestBuilder.setKeyType(a,b);return this.communicator.send(c)},TransactionService.prototype.unsetKeyType=function(a,b){const c=RequestBuilder.unsetKeyType(a,b);return this.communicator.send(c)},TransactionService.prototype.isAbstract=function(a){const b=RequestBuilder.isAbstract(a);return this.communicator.send(b).then(a=>this.respConverter.isAbstract(a))},TransactionService.prototype.setAbstract=function(a,b){const c=RequestBuilder.setAbstract(a,b);return this.communicator.send(c)},TransactionService.prototype.getRolesPlayedByType=function(a){const b=RequestBuilder.getRolesPlayedByType(a);return this.communicator.send(b).then(a=>this.respConverter.getRolesPlayedByType(a))},TransactionService.prototype.setRolePlayedByType=function(a,b){const c=RequestBuilder.setRolePlayedByType(a,b);return this.communicator.send(c)},TransactionService.prototype.unsetRolePlayedByType=function(a,b){const c=RequestBuilder.unsetRolePlayedByType(a,b);return this.communicator.send(c)},TransactionService.prototype.addEntity=function(a){const b=RequestBuilder.addEntity(a);return this.communicator.send(b).then(a=>this.respConverter.addEntity(a))},TransactionService.prototype.addRelationship=function(a){const b=RequestBuilder.addRelationship(a);return this.communicator.send(b).then(a=>this.respConverter.addRelationship(a))},TransactionService.prototype.getRelatedRoles=function(a){const b=RequestBuilder.getRelatedRoles(a);return this.communicator.send(b).then(a=>this.respConverter.getRelatedRoles(a))},TransactionService.prototype.setRelatedRole=function(a,b){const c=RequestBuilder.setRelatedRole(a,b);return this.communicator.send(c)},TransactionService.prototype.unsetRelatedRole=function(a,b){const c=RequestBuilder.unsetRelatedRole(a,b);return this.communicator.send(c)},TransactionService.prototype.putAttribute=(()=>{var a=_asyncToGenerator(function*(a,b){var c=this;const d=RequestBuilder.getDataTypeOfType(a),e=yield this.communicator.send(d),f=e.getConceptmethodRes().getResponse().getAttributetypeDatatypeRes().getDatatype(),g=RequestBuilder.putAttribute(a,f,b);return this.communicator.send(g).then(function(a){return c.respConverter.putAttribute(a)})});return function(){return a.apply(this,arguments)}})(),TransactionService.prototype.getAttribute=(()=>{var a=_asyncToGenerator(function*(a,b){var c=this;const d=RequestBuilder.getDataTypeOfType(a),e=yield this.communicator.send(d),f=e.getConceptmethodRes().getResponse().getAttributetypeDatatypeRes().getDatatype(),g=RequestBuilder.getAttribute(a,f,b);return this.communicator.send(g).then(function(a){return c.respConverter.getAttribute(a)})});return function(){return a.apply(this,arguments)}})(),TransactionService.prototype.getDataTypeOfType=function(a){const b=RequestBuilder.getDataTypeOfType(a);return this.communicator.send(b).then(a=>this.respConverter.getDataTypeOfType(a))},TransactionService.prototype.getRegex=function(a){const b=RequestBuilder.getRegex(a);return this.communicator.send(b).then(a=>this.respConverter.getRegex(a))},TransactionService.prototype.setRegex=function(a,b){const c=RequestBuilder.setRegex(a,b);return this.communicator.send(c)},TransactionService.prototype.isInferred=function(a){const b=RequestBuilder.isInferred(a);return this.communicator.send(b).then(a=>this.respConverter.isInferred(a))},TransactionService.prototype.getDirectType=function(a){const b=RequestBuilder.getDirectType(a);return this.communicator.send(b).then(a=>this.respConverter.getDirectType(a))},TransactionService.prototype.getRelationshipsByRoles=function(a,b){const c=RequestBuilder.getRelationshipsByRoles(a,b);return this.communicator.send(c).then(a=>this.respConverter.getRelationshipsByRoles(a))},TransactionService.prototype.getRolesPlayedByThing=function(a){const b=RequestBuilder.getRolesPlayedByThing(a);return this.communicator.send(b).then(a=>this.respConverter.getRolesPlayedByThing(a))},TransactionService.prototype.getAttributesByTypes=function(a,b){const c=RequestBuilder.getAttributesByTypes(a,b);return this.communicator.send(c).then(a=>this.respConverter.getAttributesByTypes(a))},TransactionService.prototype.getKeysByTypes=function(a,b){const c=RequestBuilder.getKeysByTypes(a,b);return this.communicator.send(c).then(a=>this.respConverter.getKeysByTypes(a))},TransactionService.prototype.setAttribute=function(a,b){const c=RequestBuilder.setAttribute(a,b);return this.communicator.send(c)},TransactionService.prototype.unsetAttribute=function(a,b){const c=RequestBuilder.unsetAttribute(a,b);return this.communicator.send(c)},TransactionService.prototype.rolePlayersMap=function(a){const b=RequestBuilder.rolePlayersMap(a);return this.communicator.send(b).then(a=>this.respConverter.rolePlayersMap(a))},TransactionService.prototype.rolePlayers=function(a,b){const c=RequestBuilder.rolePlayers(a,b);return this.communicator.send(c).then(a=>this.respConverter.rolePlayers(a))},TransactionService.prototype.setRolePlayer=function(a,b,c){const d=RequestBuilder.setRolePlayer(a,b,c);return this.communicator.send(d)},TransactionService.prototype.unsetRolePlayer=function(a,b,c){const d=RequestBuilder.unsetRolePlayer(a,b,c);return this.communicator.send(d)},TransactionService.prototype.getValue=function(a){const b=RequestBuilder.getValue(a);return this.communicator.send(b).then(a=>this.respConverter.getValue(a))},TransactionService.prototype.getOwners=function(a){const b=RequestBuilder.getOwners(a);return this.communicator.send(b).then(a=>this.respConverter.getOwners(a))},TransactionService.prototype.getConcept=function(a){const b=RequestBuilder.getConcept(a);return this.communicator.send(b).then(a=>this.respConverter.getConcept(a))},TransactionService.prototype.getSchemaConcept=function(a){const b=RequestBuilder.getSchemaConcept(a);return this.communicator.send(b).then(a=>this.respConverter.getSchemaConcept(a))},TransactionService.prototype.putEntityType=function(a){const b=RequestBuilder.putEntityType(a);return this.communicator.send(b).then(a=>this.respConverter.putEntityType(a))},TransactionService.prototype.putRelationshipType=function(a){const b=RequestBuilder.putRelationshipType(a);return this.communicator.send(b).then(a=>this.respConverter.putRelationshipType(a))},TransactionService.prototype.putRole=function(a){const b=RequestBuilder.putRole(a);return this.communicator.send(b).then(a=>this.respConverter.putRole(a))},TransactionService.prototype.putRule=function(a,b,c){const d=RequestBuilder.putRule(a,b,c);return this.communicator.send(d).then(a=>this.respConverter.putRule(a))},TransactionService.prototype.putAttributeType=function(a,b){const c=RequestBuilder.putAttributeType(a,b);return this.communicator.send(c).then(a=>this.respConverter.putAttributeType(a))},TransactionService.prototype.getAttributesByValue=function(a,b){const c=RequestBuilder.getAttributesByValue(a,b);return this.communicator.send(c).then(a=>this.respConverter.getAttributesByValue(a))},TransactionService.prototype.openTx=function(a,b,c){const d=RequestBuilder.openTx(a,b,c);return this.communicator.send(d)},TransactionService.prototype.commit=function(){const a=RequestBuilder.commit();return this.communicator.send(a)},TransactionService.prototype.query=function(a,b){const c=RequestBuilder.executeQuery(a,b);return this.communicator.send(c).then(a=>this.respConverter.executeQuery(a))},module.exports=TransactionService;