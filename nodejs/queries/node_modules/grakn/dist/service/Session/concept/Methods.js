'use strict';function _asyncToGenerator(a){return function(){var b=a.apply(this,arguments);return new Promise(function(a,c){function d(e,f){try{var g=b[e](f),h=g.value}catch(a){return void c(a)}return g.done?void a(h):Promise.resolve(h).then(function(a){d('next',a)},function(a){d('throw',a)})}return d('next')})}}const Constant=require('./BaseTypeConstants'),BaseType=Constant.baseType,methods={attribute:{dataType:function(){return this.txService.getDataTypeOfAttribute(this.id)},value:function(){return this.txService.getValue(this.id)},owners:function(){return this.txService.getOwners(this.id)}},attributeType:{create:function(a){return this.txService.putAttribute(this.id,a)},attribute:function(a){return this.txService.getAttribute(this.id,a)},dataType:function(){return this.txService.getDataTypeOfType(this.id)},regex:function(a){return a?this.txService.setRegex(this.id,a):this.txService.getRegex(this.id)}},concept:{delete:function(){return this.txService.deleteConcept(this.id)},isSchemaConcept:function(){return Constant.set.SCHEMA_CONCEPTS.has(this.baseType)},isType:function(){return Constant.set.TYPES.has(this.baseType)},isThing:function(){return Constant.set.THINGS.has(this.baseType)},isAttributeType:function(){return this.baseType===BaseType.ATTRIBUTE_TYPE},isEntityType:function(){return this.baseType===BaseType.ENTITY_TYPE},isRelationshipType:function(){return this.baseType===BaseType.RELATIONSHIP_TYPE},isRole:function(){return this.baseType===BaseType.ROLE},isRule:function(){return this.baseType===BaseType.RULE},isAttribute:function(){return this.baseType===BaseType.ATTRIBUTE},isEntity:function(){return this.baseType===BaseType.ENTITY},isRelationship:function(){return this.baseType===BaseType.RELATIONSHIP}},entityType:{create:function(){return this.txService.addEntity(this.id)}},relationship:{rolePlayersMap:(()=>{var a=_asyncToGenerator(function*(){return this.txService.rolePlayersMap(this.id)});return function b(){return a.apply(this,arguments)}})(),rolePlayers:(()=>{var a=_asyncToGenerator(function*(...a){return this.txService.rolePlayers(this.id,a)});return function b(){return a.apply(this,arguments)}})(),assign:function(a,b){return this.txService.setRolePlayer(this.id,a,b)},unassign:function(a,b){return this.txService.unsetRolePlayer(this.id,a,b)}},relationshipType:{create:function(){return this.txService.addRelationship(this.id)},relates:function(a){return this.txService.setRelatedRole(this.id,a)},roles:function(){return this.txService.getRelatedRoles(this.id)},unrelate:function(a){return this.txService.unsetRelatedRole(this.id,a)}},role:{relationships:function(){return this.txService.getRelationshipTypesThatRelateRole(this.id)},players:function(){return this.txService.getTypesThatPlayRole(this.id)}},rule:{getWhen:function(){return this.txService.getWhen(this.id)},getThen:function(){return this.txService.getThen(this.id)}},schemaConcept:{label:function(a){return a?this.txService.setLabel(this.id,a):this.txService.getLabel(this.id)},isImplicit:function(){return this.txService.isImplicit(this.id)},subs:function(){return this.txService.subs(this.id)},sups:function(){return this.txService.sups(this.id)},sup:function(a){return a?this.txService.setSup(this.id,a):this.txService.getSup(this.id)}},thing:{isInferred:function(){return this.txService.isInferred(this.id)},type:function(){return this.txService.getDirectType(this.id)},relationships:function(...a){return this.txService.getRelationshipsByRoles(this.id,a)},roles:function(){return this.txService.getRolesPlayedByThing(this.id)},attributes:function(...a){return this.txService.getAttributesByTypes(this.id,a)},keys:function(...a){return this.txService.getKeysByTypes(this.id,a)},has:function(a){return this.txService.setAttribute(this.id,a)},unhas:function(a){return this.txService.unsetAttribute(this.id,a)}},type:{isAbstract:function(a){return null==a?this.txService.isAbstract(this.id):this.txService.setAbstract(this.id,a)},plays:function(a){return this.txService.setRolePlayedByType(this.id,a)},playing:function(){return this.txService.getRolesPlayedByType(this.id)},key:function(a){return this.txService.setKeyType(this.id,a)},has:function(a){return this.txService.setAttributeType(this.id,a)},attributes:function(){return this.txService.getAttributeTypes(this.id)},keys:function(){return this.txService.getKeyTypes(this.id)},instances:function(){return this.txService.instances(this.id)},unplay:function(a){return this.txService.unsetRolePlayedByType(this.id,a)},unhas:function(a){return this.txService.unsetAttributeType(this.id,a)},unkey:function(a){return this.txService.unsetKeyType(this.id,a)}}};module.exports=methods;