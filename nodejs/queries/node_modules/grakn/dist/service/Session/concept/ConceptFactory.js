"use strict";const Methods=require("./Methods"),ConceptGrpcMessages=require("../autogenerated/Concept_pb"),BaseType=require("./BaseTypeConstants").baseType;function ConceptFactory(a){this.txService=a}ConceptFactory.prototype.createConcept=function(a){const b=a.getId();let c;switch(a.getBasetype()){case ConceptGrpcMessages.Concept.BASE_TYPE.ENTITY:return c=buildState(b,BaseType.ENTITY,this.txService),Object.create(entityProto,c);case ConceptGrpcMessages.Concept.BASE_TYPE.RELATION:return c=buildState(b,BaseType.RELATIONSHIP,this.txService),Object.create(relationshipProto,c);case ConceptGrpcMessages.Concept.BASE_TYPE.ATTRIBUTE:return c=buildState(b,BaseType.ATTRIBUTE,this.txService),Object.create(attributeProto,c);case ConceptGrpcMessages.Concept.BASE_TYPE.ENTITY_TYPE:return c=buildState(b,BaseType.ENTITY_TYPE,this.txService),Object.create(entityTypeProto,c);case ConceptGrpcMessages.Concept.BASE_TYPE.RELATION_TYPE:return c=buildState(b,BaseType.RELATIONSHIP_TYPE,this.txService),Object.create(relationshipTypeProto,c);case ConceptGrpcMessages.Concept.BASE_TYPE.ATTRIBUTE_TYPE:return c=buildState(b,BaseType.ATTRIBUTE_TYPE,this.txService),Object.create(attributeTypeProto,c);case ConceptGrpcMessages.Concept.BASE_TYPE.ROLE:return c=buildState(b,BaseType.ROLE,this.txService),Object.create(roleProto,c);case ConceptGrpcMessages.Concept.BASE_TYPE.RULE:return c=buildState(b,BaseType.RULE,this.txService),Object.create(ruleProto,c);case ConceptGrpcMessages.Concept.BASE_TYPE.META_TYPE:return c=buildState(b,BaseType.META_TYPE,this.txService),Object.create(metaschemaProto,c);default:throw"BaseType not recognised.";}};function buildState(a,b,c){return{id:{value:a,enumerable:!0},baseType:{value:b,enumerable:!0},txService:{value:c,enumerable:!0}}}const attributeTypeProto=Object.assign({},Methods.concept,Methods.schemaConcept,Methods.type,Methods.attributeType),relationshipTypeProto=Object.assign({},Methods.concept,Methods.schemaConcept,Methods.type,Methods.relationshipType),entityTypeProto=Object.assign({},Methods.concept,Methods.schemaConcept,Methods.type,Methods.entityType),relationshipProto=Object.assign({},Methods.concept,Methods.thing,Methods.relationship),attributeProto=Object.assign({},Methods.concept,Methods.thing,Methods.attribute),entityProto=Object.assign({},Methods.concept,Methods.thing),roleProto=Object.assign({},Methods.concept,Methods.schemaConcept,Methods.role),ruleProto=Object.assign({},Methods.concept,Methods.schemaConcept,Methods.rule),metaschemaProto=Object.assign({},Methods.concept,Methods.schemaConcept);module.exports=ConceptFactory;