"use strict";const messages=require("../autogenerated/Session_pb"),ConceptsBaseType=require("../concept/BaseTypeConstants").baseType,ProtoDataType=require("../autogenerated/Concept_pb").AttributeType.DATA_TYPE,INFER_TRUE_MESSAGE=messages.Transaction.Query.INFER.TRUE,INFER_FALSE_MESSAGE=messages.Transaction.Query.INFER.FALSE;function RunConceptMethodRequest(a,b){const c=new messages.Transaction.ConceptMethod.Req;c.setId(a),c.setMethod(b);const d=new messages.Transaction.Req;return d.setConceptmethodReq(c),d}function convertBaseType(a){return a===ConceptsBaseType.ATTRIBUTE?messages.Concept.BASE_TYPE.ATTRIBUTE:a===ConceptsBaseType.ATTRIBUTE_TYPE?messages.Concept.BASE_TYPE.ATTRIBUTE_TYPE:a===ConceptsBaseType.ENTITY?messages.Concept.BASE_TYPE.ENTITY:a===ConceptsBaseType.ENTITY_TYPE?messages.Concept.BASE_TYPE.ENTITY_TYPE:a===ConceptsBaseType.RELATIONSHIP?messages.Concept.BASE_TYPE.RELATION:a===ConceptsBaseType.RELATIONSHIP_TYPE?messages.Concept.BASE_TYPE.RELATION_TYPE:a===ConceptsBaseType.ROLE?messages.Concept.BASE_TYPE.ROLE:a===ConceptsBaseType.RULE?messages.Concept.BASE_TYPE.RULE:a===ConceptsBaseType.META_TYPE?messages.Concept.BASE_TYPE.META_TYPE:void 0}function toGrpcConcept(a){if(!a.id)throw new Error("Provided Concept without Id field.");if(!a.baseType)throw new Error("Provided Concept without baseType field.");const b=new messages.Concept;return b.setId(a.id),b.setBasetype(convertBaseType(a.baseType)),b}function setAttributeValueObject(a,b,c){if(null==b)throw new Error("Datatype of AttributeType not specified.");switch(b){case ProtoDataType.STRING:a.setString(c);break;case ProtoDataType.BOOLEAN:a.setBoolean(c);break;case ProtoDataType.INTEGER:a.setInteger(c);break;case ProtoDataType.LONG:a.setLong(c);break;case ProtoDataType.FLOAT:a.setFloat(c);break;case ProtoDataType.DOUBLE:a.setDouble(c);break;case ProtoDataType.DATE:a.setDate(c.getTime());break;default:throw new Error("DataType of attribute not recognised.");}}const methods={deleteConcept:function(a){const b=new messages.Concept.Delete.Req,c=new messages.Method.Req;return c.setConceptDeleteReq(b),RunConceptMethodRequest(a,c)},getLabel:function(a){const b=new messages.SchemaConcept.GetLabel.Req,c=new messages.Method.Req;return c.setSchemaconceptGetlabelReq(b),RunConceptMethodRequest(a,c)},setLabel:function(a,b){const c=new messages.SchemaConcept.SetLabel.Req;c.setLabel(b);const d=new messages.Method.Req;return d.setSchemaconceptSetlabelReq(c),RunConceptMethodRequest(a,d)},isImplicit:function(a){const b=new messages.SchemaConcept.IsImplicit.Req,c=new messages.Method.Req;return c.setSchemaconceptIsimplicitReq(b),RunConceptMethodRequest(a,c)},subs:function(a){const b=new messages.SchemaConcept.Subs.Req,c=new messages.Method.Req;return c.setSchemaconceptSubsReq(b),RunConceptMethodRequest(a,c)},sups:function(a){const b=new messages.SchemaConcept.Sups.Req,c=new messages.Method.Req;return c.setSchemaconceptSupsReq(b),RunConceptMethodRequest(a,c)},getSup:function(a){const b=new messages.SchemaConcept.GetSup.Req,c=new messages.Method.Req;return c.setSchemaconceptGetsupReq(b),RunConceptMethodRequest(a,c)},setSup:function(a,b){const c=new messages.SchemaConcept.SetSup.Req;c.setSchemaconcept(toGrpcConcept(b));const d=new messages.Method.Req;return d.setSchemaconceptSetsupReq(c),RunConceptMethodRequest(a,d)},getWhen:function(a){const b=new messages.Rule.When.Req,c=new messages.Method.Req;return c.setRuleWhenReq(b),RunConceptMethodRequest(a,c)},getThen:function(a){const b=new messages.Rule.Then.Req,c=new messages.Method.Req;return c.setRuleThenReq(b),RunConceptMethodRequest(a,c)},getRelationshipTypesThatRelateRole:function(a){const b=new messages.Role.Relations.Req,c=new messages.Method.Req;return c.setRoleRelationsReq(b),RunConceptMethodRequest(a,c)},getTypesThatPlayRole:function(a){const b=new messages.Role.Players.Req,c=new messages.Method.Req;return c.setRolePlayersReq(b),RunConceptMethodRequest(a,c)},instances:function(a){const b=new messages.Type.Instances.Req,c=new messages.Method.Req;return c.setTypeInstancesReq(b),RunConceptMethodRequest(a,c)},getAttributeTypes:function(a){const b=new messages.Type.Attributes.Req,c=new messages.Method.Req;return c.setTypeAttributesReq(b),RunConceptMethodRequest(a,c)},setAttributeType:function(a,b){const c=new messages.Type.Has.Req;c.setAttributetype(toGrpcConcept(b));const d=new messages.Method.Req;return d.setTypeHasReq(c),RunConceptMethodRequest(a,d)},unsetAttributeType:function(a,b){const c=new messages.Type.Unhas.Req;c.setAttributetype(toGrpcConcept(b));const d=new messages.Method.Req;return d.setTypeUnhasReq(c),RunConceptMethodRequest(a,d)},getKeyTypes:function(a){const b=new messages.Type.Keys.Req,c=new messages.Method.Req;return c.setTypeKeysReq(b),RunConceptMethodRequest(a,c)},setKeyType:function(a,b){const c=new messages.Type.Key.Req;c.setAttributetype(toGrpcConcept(b));const d=new messages.Method.Req;return d.setTypeKeyReq(c),RunConceptMethodRequest(a,d)},unsetKeyType:function(a,b){const c=new messages.Type.Unkey.Req;c.setAttributetype(toGrpcConcept(b));const d=new messages.Method.Req;return d.setTypeUnkeyReq(c),RunConceptMethodRequest(a,d)},isAbstract:function(a){const b=new messages.Type.IsAbstract.Req,c=new messages.Method.Req;return c.setTypeIsabstractReq(b),RunConceptMethodRequest(a,c)},setAbstract:function(a,b){const c=new messages.Type.SetAbstract.Req;c.setAbstract(b);const d=new messages.Method.Req;return d.setTypeSetabstractReq(c),RunConceptMethodRequest(a,d)},getRolesPlayedByType:function(a){const b=new messages.Type.Playing.Req,c=new messages.Method.Req;return c.setTypePlayingReq(b),RunConceptMethodRequest(a,c)},setRolePlayedByType:function(a,b){const c=new messages.Type.Plays.Req;c.setRole(toGrpcConcept(b));const d=new messages.Method.Req;return d.setTypePlaysReq(c),RunConceptMethodRequest(a,d)},unsetRolePlayedByType:function(a,b){const c=new messages.Type.Unplay.Req;c.setRole(toGrpcConcept(b));const d=new messages.Method.Req;return d.setTypeUnplayReq(c),RunConceptMethodRequest(a,d)},addEntity:function(a){const b=new messages.EntityType.Create.Req,c=new messages.Method.Req;return c.setEntitytypeCreateReq(b),RunConceptMethodRequest(a,c)},addRelationship:function(a){const b=new messages.RelationType.Create.Req,c=new messages.Method.Req;return c.setRelationtypeCreateReq(b),RunConceptMethodRequest(a,c)},getRelatedRoles:function(a){const b=new messages.RelationType.Roles.Req,c=new messages.Method.Req;return c.setRelationtypeRolesReq(b),RunConceptMethodRequest(a,c)},setRelatedRole:function(a,b){const c=new messages.RelationType.Relates.Req;c.setRole(toGrpcConcept(b));const d=new messages.Method.Req;return d.setRelationtypeRelatesReq(c),RunConceptMethodRequest(a,d)},unsetRelatedRole:function(a,b){const c=new messages.RelationType.Unrelate.Req;c.setRole(toGrpcConcept(b));const d=new messages.Method.Req;return d.setRelationtypeUnrelateReq(c),RunConceptMethodRequest(a,d)},putAttribute:function(a,b,c){const d=new messages.AttributeType.Create.Req,e=new messages.ValueObject;setAttributeValueObject(e,b,c),d.setValue(e);const f=new messages.Method.Req;return f.setAttributetypeCreateReq(d),RunConceptMethodRequest(a,f)},getAttribute:function(a,b,c){const d=new messages.AttributeType.Attribute.Req,e=new messages.ValueObject;setAttributeValueObject(e,b,c),d.setValue(e);const f=new messages.Method.Req;return f.setAttributetypeAttributeReq(d),RunConceptMethodRequest(a,f)},getDataTypeOfType:function(a){const b=new messages.AttributeType.DataType.Req,c=new messages.Method.Req;return c.setAttributetypeDatatypeReq(b),RunConceptMethodRequest(a,c)},getRegex:function(a){const b=new messages.AttributeType.GetRegex.Req,c=new messages.Method.Req;return c.setAttributetypeGetregexReq(b),RunConceptMethodRequest(a,c)},setRegex:function(a,b){const c=new messages.AttributeType.SetRegex.Req;c.setRegex(b);const d=new messages.Method.Req;return d.setAttributetypeSetregexReq(c),RunConceptMethodRequest(a,d)},isInferred:function(a){const b=new messages.Thing.IsInferred.Req,c=new messages.Method.Req;return c.setThingIsinferredReq(b),RunConceptMethodRequest(a,c)},getDirectType:function(a){const b=new messages.Thing.Type.Req,c=new messages.Method.Req;return c.setThingTypeReq(b),RunConceptMethodRequest(a,c)},getRelationshipsByRoles:function(a,b){const c=new messages.Thing.Relations.Req,d=new messages.Method.Req;return b.length&&c.setRolesList(b.map(a=>toGrpcConcept(a))),d.setThingRelationsReq(c),RunConceptMethodRequest(a,d)},getRolesPlayedByThing:function(a){const b=new messages.Thing.Roles.Req,c=new messages.Method.Req;return c.setThingRolesReq(b),RunConceptMethodRequest(a,c)},getAttributesByTypes:function(a,b){const c=new messages.Thing.Attributes.Req,d=new messages.Method.Req;return b.length&&c.setAttributetypesList(b.map(a=>toGrpcConcept(a))),d.setThingAttributesReq(c),RunConceptMethodRequest(a,d)},getKeysByTypes:function(a,b){const c=new messages.Thing.Keys.Req,d=new messages.Method.Req;return b.length&&c.setAttributetypesList(b.map(a=>toGrpcConcept(a))),d.setThingKeysReq(c),RunConceptMethodRequest(a,d)},setAttribute:function(a,b){const c=new messages.Thing.Relhas.Req,d=new messages.Method.Req;return c.setAttribute(toGrpcConcept(b)),d.setThingRelhasReq(c),RunConceptMethodRequest(a,d)},unsetAttribute:function(a,b){const c=new messages.Thing.Unhas.Req,d=new messages.Method.Req;return c.setAttribute(toGrpcConcept(b)),d.setThingUnhasReq(c),RunConceptMethodRequest(a,d)},rolePlayersMap:function(a){const b=new messages.Relation.RolePlayersMap.Req,c=new messages.Method.Req;return c.setRelationRoleplayersmapReq(b),RunConceptMethodRequest(a,c)},rolePlayers:function(a,b){const c=new messages.Relation.RolePlayers.Req;b.length&&c.setRolesList(b.map(a=>toGrpcConcept(a)));const d=new messages.Method.Req;return d.setRelationRoleplayersReq(c),RunConceptMethodRequest(a,d)},setRolePlayer:function(a,b,c){const d=new messages.Relation.Assign.Req;d.setRole(toGrpcConcept(b)),d.setPlayer(toGrpcConcept(c));const e=new messages.Method.Req;return e.setRelationAssignReq(d),RunConceptMethodRequest(a,e)},unsetRolePlayer:function(a,b,c){const d=new messages.Relation.Unassign.Req;d.setRole(toGrpcConcept(b)),d.setPlayer(toGrpcConcept(c));const e=new messages.Method.Req;return e.setRelationUnassignReq(d),RunConceptMethodRequest(a,e)},getValue:function(a){const b=new messages.Attribute.Value.Req,c=new messages.Method.Req;return c.setAttributeValueReq(b),RunConceptMethodRequest(a,c)},getOwners:function(a){const b=new messages.Attribute.Owners.Req,c=new messages.Method.Req;return c.setAttributeOwnersReq(b),RunConceptMethodRequest(a,c)},getConcept:function(a){const b=new messages.Transaction.Req,c=new messages.Transaction.GetConcept.Req;return c.setId(a),b.setGetconceptReq(c),b},getSchemaConcept:function(a){const b=new messages.Transaction.Req,c=new messages.Transaction.GetSchemaConcept.Req;return c.setLabel(a),b.setGetschemaconceptReq(c),b},putEntityType:function(a){const b=new messages.Transaction.Req,c=new messages.Transaction.PutEntityType.Req;return c.setLabel(a),b.setPutentitytypeReq(c),b},putRelationshipType:function(a){const b=new messages.Transaction.Req,c=new messages.Transaction.PutRelationType.Req;return c.setLabel(a),b.setPutrelationtypeReq(c),b},putRole:function(a){const b=new messages.Transaction.Req,c=new messages.Transaction.PutRole.Req;return c.setLabel(a),b.setPutroleReq(c),b},putRule:function(a,b,c){const d=new messages.Transaction.Req,e=new messages.Transaction.PutRule.Req;return e.setLabel(a),e.setWhen(b),e.setThen(c),d.setPutruleReq(e),d},putAttributeType:function(a,b){if(null==b)throw new Error("Datatype of AttributeType not specified.");const c=new messages.Transaction.Req,d=new messages.Transaction.PutAttributeType.Req;return d.setLabel(a),d.setDatatype(b),c.setPutattributetypeReq(d),c},getAttributesByValue:function(a,b){if(null==b)throw new Error("Datatype of AttributeType not specified.");const c=new messages.Transaction.Req,d=new messages.ValueObject,e=new messages.Transaction.GetAttributes.Req;return setAttributeValueObject(d,b,a),e.setValue(d),c.setGetattributesReq(e),c},openTx:function(a,b,c){const d=new messages.Transaction.Open.Req,e=new messages.Transaction.Req;return d.setKeyspace(a),d.setType(b),c&&(d.setUsername(c.username),d.setPassword(c.password)),e.setOpenReq(d),e},commit:function(){const a=new messages.Transaction.Req,b=new messages.Transaction.Commit.Req;return a.setCommitReq(b),a},executeQuery:function(a,b){const c=new messages.Transaction.Req,d=new messages.Transaction.Query.Req;return d.setQuery(a),b&&"infer"in b&&d.setInfer(b.infer?INFER_TRUE_MESSAGE:INFER_FALSE_MESSAGE),c.setQueryReq(d),c},nextReq:function(a){const b=new messages.Transaction.Req,c=new messages.Transaction.Iter.Req;return c.setId(a),b.setIterateReq(c),b}};module.exports=methods;