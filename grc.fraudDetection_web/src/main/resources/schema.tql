#
# Copyright (C) 2022 Vaticle
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# dataset without banks
# https://www.kaggle.com/datasets/kartik2112/fraud-detection?select=fraudTrain.csv

 define

name sub attribute,
    value string;

first_name sub attribute,
    value string;

last_name sub attribute,
    value string;

job sub attribute,
    value string;

gender sub attribute,
    value string,
    regex "^(F|M|O)$";

company_type sub attribute,
    value string;

timestamp sub attribute,
    value datetime;

date_of_birth sub attribute,
    value datetime;

card_number sub attribute,
    value long;

amount sub attribute,
    value double;

transaction_number sub attribute,
    value string;

street sub attribute,
    value string;

city sub attribute,
    value string;

state sub attribute,
    value string;

zip sub attribute,
    value long;

longitude sub attribute,
    value double;

latitude sub attribute,
    value double;

Geo_coordinate sub entity,
    owns longitude,
    owns latitude,
    plays locate:geo,
    plays geolocate:geo,
    plays same_place:located_com,
    plays same_place:located_per;

Address sub entity,
    owns street,
    owns city,
    owns state,
    owns zip,
    plays locate:location;

Card sub entity,
    owns card_number,
    plays bank_account:attached_card,
    plays transaction:used_card;

Person sub entity,
    owns first_name,
    owns last_name,
    owns gender,
    owns job,
    owns date_of_birth,
    plays bank_account:owner,
    plays locate:identify,
    plays customer_relationship:buyer,
    plays same_place:person,
    plays unsafe_relationship:unsafe_buyer;

Company sub entity,
    owns name,
    owns company_type,
    plays transaction:to,
    plays geolocate:identify,
    plays customer_relationship:company,
    plays same_place:company,
    plays unsafe_relationship:unsafe_company;

Bank sub Company,
    plays bank_account:attached_bank;

bank_account sub relation,
    relates owner,
    relates attached_card,
    relates attached_bank;

transaction sub relation,
    owns timestamp,
    owns amount,
    owns transaction_number,
    relates used_card,
    relates to;

geolocate sub relation,
    relates geo,
    relates identify;

locate sub geolocate,
    relates location;

customer_relationship sub relation,
    relates buyer,
    relates company;

unsafe_relationship sub relation,
    relates unsafe_buyer,
    relates unsafe_company;

same_place sub relation,
    relates person,
    relates company,
    relates located_com,
    relates located_per;

rule isa_customer_relationship:
    when {
        (owner: $per, attached_card: $car, $gar) isa bank_account;
        (used_card: $car, to: $com) isa transaction;
    } then {
        (buyer: $per, company: $com) isa customer_relationship;
    };

rule isa_same_place:
    when {
        $geo1 isa Geo_coordinate, has longitude $l1, has latitude $l2;
        $geo2 isa Geo_coordinate, has longitude $l1, has latitude $l2;
        (geo: $geo1, identify: $per, $arg) isa locate;
        (geo: $geo2, identify: $com) isa geolocate;
        $com isa Company;
        $per isa Person;
    } then {
        (person: $per, company: $com, located_com: $geo2, located_per: $geo1) isa same_place;
    };

rule is_not_safe:
    when {
        $per isa Person;
        $com isa Company;
        (buyer: $per, company: $com) isa customer_relationship;
        not{
            (person: $per, company: $com) isa same_place;
        };
    } then {
        (unsafe_buyer: $per, unsafe_company: $com) isa unsafe_relationship;
    };